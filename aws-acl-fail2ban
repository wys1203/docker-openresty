#!/usr/bin/env python

import os
import random
import argparse
import subprocess
import json
import boto3


class AwsAclFail2Ban:

    def __init__(self, network_acl_id):
        try:
            ec2 = boto3.resource('ec2', aws_access_key_id=os.environ.get('AWS_ACCESS_KEY_ID'),
                                 aws_secret_access_key=os.environ.get('AWS_SECRET_ACCESS_KEY'),
                                 region_name='ap-southeast-1')
            self.network_acl = ec2.NetworkAcl(network_acl_id)
        except Exception as e:
            print e

    def ban(self, ip):
        rule_number = self.__get_available_rule_number(ip)
        self.network_acl.create_entry(RuleNumber=rule_number,
                                      Protocol='-1',
                                      RuleAction='deny',
                                      Egress=False,
                                      CidrBlock='%s/32' % ip)

    def unban(self, ip):
        rule_number = self.__get_available_rule_number(ip)
        self.network_acl.delete_entry(RuleNumber=rule_number, Egress=False)

    def __get_all_inegress_entries(self):
        entries = []
        for entry in self.network_acl.entries:
            if entry['Egress'] is False:
                entries.append(entry)
        return entries

    def __get_available_rule_number(self, ip):
        rules = self.__rule_exists(ip)
        if type(rules) is dict:
            return rules['RuleNumber']
        else:
            run = True
            while run:
                rule_number = random.randint(1, 99)
                if rule_number not in rules:
                    run = False
            return rule_number

    def __rule_exists(self, ip):
        result = self.__get_all_inegress_entries()
        exist_rule_number = []
        for rule in result:
            if rule['CidrBlock'].split('/')[0] == ip:
                return rule
            else:
                exist_rule_number.append(rule['RuleNumber'])
        return exist_rule_number


def main(args):
    aws_acl_fail2ban = AwsAclFail2Ban(args['network_acl_id'])

    if args['ban'] is not None:
        aws_acl_fail2ban.ban(args['ban'])
    else:
        aws_acl_fail2ban.unban(args['unban'])


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='AWS ACL Fail2Ban Controller')
    parser.add_argument('-b', '--ban',
                        help='Create a "DENY" entry (a rule) in a network ACL with the specified rule number.', type=str)
    parser.add_argument('-u', '--unban',
                        help='Delete a entry (a rule) in a network ACL with the specified rule number.', type=str)
    parser.add_argument('-i', '--network-acl-id',
                        help='Specify the AWS Network Acl Id.', default=os.environ.get('ACL_ID'))
    args = vars(parser.parse_args())

    main(args)
